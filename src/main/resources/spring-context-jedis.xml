<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd"
	   default-lazy-init="true">

	<description>Jedis Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:shop.properties" />
	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" /> <!-- 最大能够保持idel状态的对象数  -->
		<property name="maxTotal" value="${redis.pool.maxTotal}" /> <!-- 最大分配的对象数 -->
		<!--<property name="minIdle" value="100" />-->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" /> <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />
	</bean>
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" p:usePool="true"
		p:pool-config-ref="jedisPoolConfig" />

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	<!--         如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast to String！！！-->
		<!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>

		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>


	<!--<bean id="jedisPool" class="redis.clients.jedis.JedisPool">-->
		<!--<constructor-arg index="0" ref="jedisPoolConfig" />-->
		<!--<constructor-arg index="1" value="${redis.host}" />-->
		<!--<constructor-arg index="2" value="${redis.port}" type="int" />-->
	<!--</bean>-->

	<!-- JEDIS SHARD 池配置 -->
	<!--<bean id="jedisPool" class="redis.clients.jedis.ShardedJedisPool">-->
		<!--<constructor-arg index="0" ref="jedisPoolConfig" />-->
		<!--<constructor-arg index="1">-->
			<!--<list>-->
				<!--<ref bean="jedis.shardInfo.default" />-->
			<!--</list>-->
		<!--</constructor-arg>-->
	<!--</bean>-->
	<!--&lt;!&ndash; JEDIS SHARD信息配置[START]      在此添加REDIS集群配置 &ndash;&gt;-->
	<!--<bean id="jedis.shardInfo.default" class="redis.clients.jedis.JedisShardInfo">-->
		<!--<constructor-arg index="0" value="${redis.host}" />-->
		<!--<constructor-arg index="1" type="int" value="${redis.port}" />-->
		<!--&lt;!&ndash;<constructor-arg index="2" type="java.lang.String" value="192.168.1.21" />&ndash;&gt;-->
	<!--</bean>-->
	<!-- JEDIS SHARD信息配置 [END] -->
</beans>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beiyelin.shop.modules.sys.dao.PersonDao">
	

	<sql id="personEntityColumns">
		a.id,
		a.login_name,
		a.password,
		a.name,
		a.email,
		a.phone,
		a.mobile,
		a.user_type,
		a.login_ip,
		a.login_date,
		a.remarks,
		a.login_flag,
		a.photo,
		a.register_from,
		a.db_url,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.del_flag
	</sql>
	
    <sql id="personColumns">
    	a.id,
    	a.login_name,
    	a.password,
		a.name,
		a.email,
		a.phone,
		a.mobile,
		a.user_type,
		a.login_ip,
		a.login_date,
		a.remarks,
		a.login_flag,
		a.photo,
		a.register_from,
		a.db_url,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.del_flag
    </sql>
    

	<!-- 根据编号获得用户 -->
	<select id="get" resultType="Person">
		SELECT
			<include refid="personColumns"/><!-- ,
			ro.office_id AS "roleList.officeList.id" -->
		FROM app_person a
		WHERE a.id = #{id}
	</select>

    <!-- 获得用户表的实体 -->
    <select id="getEntity" resultType="Person">
        SELECT
            <include refid="personEntityColumns"/>
        FROM app_person a
        WHERE a.id = #{id}
    </select>

	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultType="Person" parameterType="Person">
		SELECT
			<include refid="personColumns"/><!-- ,
			ro.office_id AS "roleList.officeList.id" -->
		FROM app_person a
		WHERE a.login_name = #{loginName} AND a.del_flag = #{DEL_FLAG_NORMAL}
	</select>

    <!-- 前台根据登录名查询用户 -->
    <select id="getByLoginName2" resultType="Person" parameterType="Person">
        SELECT
        <include refid="personEntityColumns"/>
        FROM app_person a
        WHERE a.login_name = #{loginName} AND a.del_flag = #{DEL_FLAG_NORMAL}
    </select>

    <!-- 前台根据手机号查询用户 -->
    <select id="getByMobile" resultType="Person" parameterType="Person">
        SELECT
          <include refid="personEntityColumns"/>
        FROM app_person a
        WHERE a.mobile = #{mobile} AND a.del_flag = #{DEL_FLAG_NORMAL}
    </select>
	
	<!-- 分页查询用户信息 -->
	<select id="findList" resultType="Person">
		SELECT
			<include refid="personColumns"/>
		FROM app_person a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<if test="loginName != null and loginName != ''">
			AND a.login_name like 
					<if test="dbName == 'oracle'">'%'||#{loginName}||'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{loginName}, '%')</if>
		</if>
		<if test="name != null and name != ''">
			AND a.name like 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{name}, '%')</if>
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY c.code, o.code, a.name
			</otherwise>
		</choose>
	</select>
	

	<!-- 查询全部用户 -->
	<select id="findAllList" resultType="Person">
		SELECT
			<include refid="personColumns"/>
		FROM app_person a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		ORDER BY a.name
	</select>
	
	<!-- 查询全部用户数目 -->
	<select id="findAllCount" resultType="long">
		SELECT
			COUNT(1)
		FROM app_person a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<!-- 插入用户 -->
	<insert id="insert">
		INSERT INTO app_person(
			id, 
			login_name,
			password, 
			name,
			email, 
			phone, 
			mobile, 
			user_type,
			register_from,
			db_url,
			create_by,
			create_date, 
			update_by, 
			update_date, 
			remarks, 
			login_flag, 
			photo, 
			del_flag
		) VALUES (
			#{id}, 
			#{loginName},
			#{password}, 
			#{name},
			#{email}, 
			#{phone}, 
			#{mobile}, 
			#{userType},
			#{registerFrom},
			#{dbUrl},
			#{createBy.id},
			#{createDate}, 
			#{updateBy.id}, 
			#{updateDate}, 
			#{remarks}, 
			#{loginFlag}, 
			#{photo}, 
			#{delFlag}
		)
	</insert>
	
	<!-- 更新用户 -->
	<update id="update">
		UPDATE app_person SET
			login_name = #{loginName},
			name = #{name},
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			user_type = #{userType},
			update_by = #{updateBy.id},
			update_date = #{updateDate}, 
			remarks = #{remarks},
			photo = #{photo},
			db_url = #{dbUrl}
		WHERE id = #{id}
	</update>
	
	<!-- 删除用户和角色关联表数据 -->
	<!--<delete id="deleteUserRole">-->
		<!--DELETE FROM sys_user_role WHERE user_id = #{id}-->
	<!--</delete>-->
	
	<!-- 插入用户和角色关联表数据 -->
	<!--<insert id="insertUserRole">-->
		<!--INSERT INTO sys_user_role(user_id, role_id)-->
		<!--<foreach collection="roleList" item="role" separator=" union all ">-->
			<!--SELECT #{id}, #{role.id} FROM dual-->
		<!--</foreach>-->
	<!--</insert>-->

	<!-- 前台用户插入用户和角色关联表数据 -->
	<!--<insert id="insertUserRole4Frontend">-->
		<!--INSERT INTO sys_user_role (user_id, role_id)-->
		<!--VALUES (#{id}, #{role.id})-->
	<!--</insert>-->
	
	<!-- 更新用户信息  -->
	<update id="updatePersonInfo">
		UPDATE app_person SET
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			remarks = #{remarks},
			photo = #{photo}
		WHERE id = #{id}
	</update>
	
	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE app_person SET
			password = #{password} 
		WHERE id = #{id}
	</update>
	
	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE app_person SET
			login_ip = #{loginIp}, 
			login_Date = #{loginDate} 
		WHERE id = #{id}
	</update>
	
	<!-- 逻辑删除用户 -->
	<update id="delete">
		UPDATE app_person SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	<!-- 更新APP用户登录令牌 -->
	<!--<update id="updateAppLoginToken">-->
		<!--UPDATE app_person SET-->
			<!--app_login_token = #{appLoginToken}-->
		<!--WHERE id = #{id}-->
	<!--</update>-->

    <!-- APP用户是否已经登录？ -->
    <!--<select id="isAppLoggedIn" resultType="long">-->
        <!--SELECT COUNT(1)-->
        <!--FROM app_person a-->
		<!--<where>-->
        	<!--id = #{id} AND app_login_token = #{appLoginToken}-->
		<!--</where>-->
    <!--</select>-->
</mapper>